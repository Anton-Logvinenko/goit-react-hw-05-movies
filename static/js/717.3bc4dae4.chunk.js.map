{"version":3,"file":"static/js/717.3bc4dae4.chunk.js","mappings":"+PA2BA,EAzBiB,SAAC,GAAkB,IAAhBA,EAAe,EAAfA,SAElB,OADAC,QAAQC,IAAI,WAAYF,GACG,IAApBA,EAASG,QACd,iDAEA,wBACGH,EAASI,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAWC,EAAxB,EAAwBA,aAAxB,OACZ,2BACE,gBACEC,IACGD,EAAD,0CAEuCA,GADnCE,EAGNC,IAAKL,EACLM,MAAM,QAER,kCAAUN,MACV,uCAAgBC,GAAY,wBAXrBF,EADG,KAiBnB,E,SCED,EAtBa,WACX,OAAgCQ,EAAAA,EAAAA,UAAS,MAAzC,eAAOb,EAAP,KAAiBc,EAAjB,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAcR,IAZAE,EAAAA,EAAAA,YAAU,WAAM,wCACd,8GAE2BC,EAAAA,EAAAA,IAAaH,GAFxC,OAEUI,EAFV,OAGIL,EAAYK,EAASC,MAHzB,gDAKInB,QAAQC,IAAR,MALJ,0DADc,uBAAC,WAAD,wBASdmB,EACD,GAAE,CAACN,IAECf,EAGL,OAAO,SAAC,EAAD,CAAUA,SAAUA,GAC5B,C,+LCxBKsB,EAAW,+BACXC,EAAU,mCACVC,EAAS,UAAMF,EAAN,wBACTG,EAAU,UAAMH,EAAN,iBACVI,EAAiB,UAAMJ,EAAN,WAAvB,SAEeK,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,6FACQC,EAAS,CACbC,QAASN,GAFb,SAIyBO,EAAAA,EAAAA,IAAA,UAAaN,GAAa,CAAEI,OAAAA,IAJrD,cAIQG,EAJR,OAKE9B,QAAQC,IAAI,SAAU6B,GALxB,kBAMSA,EAASC,MANlB,2EASeC,EAAoB,GAApBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAmClB,GAAnC,gFACQa,EAAS,CACbC,QAASN,GAFb,SAIyBO,EAAAA,EAAAA,IAAA,UAAaJ,GAAb,OAAiCX,GAAW,CACjEa,OAAAA,IALJ,cAIQG,EAJR,yBAOSA,EAASC,MAPlB,2EAYed,EAAa,GAAbA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA4BH,GAA5B,gFACQa,EAAS,CACbC,QAASN,GAFb,SAIuBO,EAAAA,EAAAA,IAAA,UAAaJ,GAAb,OAAiCX,EAAjC,YAAoD,CACzEa,OAAAA,IALF,cAIOG,EAJP,yBAOOA,EAASC,MAPhB,2EAWeE,EAAAA,GAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAiCnB,GAAjC,gFACQa,EAAS,CACbC,QAASN,GAFb,SAIsBO,EAAAA,EAAAA,IAAA,UAAaJ,GAAb,OAAiCX,EAAjC,YAAoD,CAACa,OAAAA,IAJ3E,cAIMG,EAJN,yBAKOA,EAASC,MALhB,2EASgBG,EAAAA,GAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAhB,OAAgBA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAhB,WAAgCC,GAAhC,gFACQR,EAAS,CACbC,QAASN,EACTc,MAAOD,EACPE,KAAK,GAJT,SAOuBR,EAAAA,EAAAA,IAAA,UAAaL,GAAa,CAACG,OAAAA,IAPlD,cAOMG,EAPN,yBAQOA,EAASC,MARhB,kE","sources":["components/CastList/CastLIst.jsx","components/CastList/Cast.jsx","services/MoviesFetch.jsx"],"sourcesContent":["import posterPlug from '../../utility/posterPlug.png';\n\nconst CastList = ({ castInfo }) => {\n  console.log('castInfo', castInfo);\n  return castInfo.length === 0 ? (\n    <h2>No cast Information</h2>\n  ) : (\n    <ul>\n      {castInfo.map(({ id, name, character, profile_path }) => (\n        <li key={id}>\n          <img\n            src={\n              !profile_path\n                ? posterPlug\n                : `https://image.tmdb.org/t/p/w500/${profile_path}`\n            }\n            alt={name}\n            width=\"70\"\n          />\n          <p>Name: {name}</p>\n          <p>Character: {!character ? '\"no information\"' : character}</p>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default CastList;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport CastList from './CastLIst';\nimport { getMovieCast } from '../../services/MoviesFetch';\n\nconst Cast = () => {\n  const [castInfo, setCastInfo] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function getCastInfo() {\n      try {\n        const castData = await getMovieCast(movieId);\n        setCastInfo(castData.cast);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    getCastInfo();\n  }, [movieId]);\n\n  if (!castInfo) {\n    return;\n  }\n  return <CastList castInfo={castInfo} />;\n};\nexport default Cast;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '992e567e43c913ea6cedbae9c8870c1e';\nconst TREND_URL = `${BASE_URL}/trending/movie/week`;\nconst SEARCH_URL = `${BASE_URL}/search/movie`;\nconst MOVIE_DETAILS_URL = `${BASE_URL}/movie/`;\n\nasync function getTrendFetch() {\n  const params = {\n    api_key: API_KEY,\n  };\n  const response = await axios.get(`${TREND_URL}`, { params });\n  console.log('111111', response);\n  return response.data;\n}\n\nasync function getMovieDeteilFetch(movieId) {\n  const params = {\n    api_key: API_KEY,\n  };\n  const response = await axios.get(`${MOVIE_DETAILS_URL}${movieId}`, {\n    params});\n\n  return response.data;\n}\n\n\n\nasync function getMovieCast(movieId){\n  const params = {\n    api_key: API_KEY,\n  };\n const response= await axios.get(`${MOVIE_DETAILS_URL}${movieId}/credits`, {\n  params});\n\nreturn response.data\n}\n\n\nasync function getMoviesReviews (movieId){\n  const params = {\n    api_key: API_KEY,\n  };\nconst response= await axios.get(`${MOVIE_DETAILS_URL}${movieId}/reviews`, {params})\nreturn response.data\n\n}\n\nasync function  getSearchFetch (moviesName){\n  const params = {\n    api_key: API_KEY,\n    query: moviesName,\n    page:1,\n  };\n\nconst response = await axios.get(`${SEARCH_URL}`,{params})\nreturn response.data\n\n}\n\n\n\n\n\n\nexport { getTrendFetch, getMovieDeteilFetch, getMovieCast, getMoviesReviews, getSearchFetch};\n"],"names":["castInfo","console","log","length","map","id","name","character","profile_path","src","posterPlug","alt","width","useState","setCastInfo","movieId","useParams","useEffect","getMovieCast","castData","cast","getCastInfo","BASE_URL","API_KEY","TREND_URL","SEARCH_URL","MOVIE_DETAILS_URL","getTrendFetch","params","api_key","axios","response","data","getMovieDeteilFetch","getMoviesReviews","getSearchFetch","moviesName","query","page"],"sourceRoot":""}