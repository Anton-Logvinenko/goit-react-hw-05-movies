{"version":3,"file":"static/js/83.7b73190b.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesTrendList.Styled.js","components/MoviesList/MoviesTrendList.jsx","pages/Home.jsx","services/MoviesFetch.jsx"],"sourcesContent":["import styled from 'styled-components';\n\n\nexport  const Conteiner= styled.div`\npadding:10px 25px;\n\n`\n\nexport const List= styled.ul`\n  list-style: none;\n  margin:0;\n  padding:0;\n`\n\nexport const Li= styled.li`\nmargin-bottom:10px;`\n\nexport const ImgBox= styled.div` \ndisplay:flex;\ngap:10px;\nalign-items:center;\n`\n","import { Link, useLocation } from 'react-router-dom';\nimport posterPlug from '../../utility/posterPlug.png';\n// Стили\nimport {Conteiner, List, Li, ImgBox } from './MoviesTrendList.Styled'\nconst MoviesTrendList = ({ trendMovies }) => {\n  const imgPoster = `https://image.tmdb.org/t/p/w500/`;\n\n  const location = useLocation();\n  return (\n    <Conteiner>\n      <h1>Trending today</h1>\n      <List>\n        {trendMovies.map(({ id, title, release_date, poster_path }) => (\n          <Li key={id}>\n            <Link to={`/movies/${id}`} state={{ from: location }}>\n            <ImgBox>   <img\n                src={!poster_path ? posterPlug : `${imgPoster}${poster_path}`}\n                alt={title}\n                width=\"70\"\n              />\n              <p>{`${title} (${release_date.slice(0, 4)}) `}</p></ImgBox>\n           \n            </Link>\n          </Li >\n        ))}\n      </List>\n    </Conteiner>\n  );\n};\n\nexport default MoviesTrendList;\n","import { useEffect, useState } from 'react';\nimport {getTrendFetch} from '../services/MoviesFetch';\nimport MoviesTrendList from '../components/MoviesList/MoviesTrendList';\n\nconst Home = () => {\n  const [trendMovies, setTrendMovies] = useState([]);\n\n  useEffect(() => {\n    async function getTrendMovies() {\n      try {\n        const trendMov = await getTrendFetch();\n        console.log('222', trendMov.results);\n        setTrendMovies(trendMov.results);\n      } catch (error) {\n        console.log(error);\n      }\n         } getTrendMovies();\n  }, []);\n\n  return <MoviesTrendList trendMovies={trendMovies} />;\n};\n\nexport default Home;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '992e567e43c913ea6cedbae9c8870c1e';\nconst TREND_URL = `${BASE_URL}/trending/movie/week`;\nconst SEARCH_URL = `${BASE_URL}/search/movie`;\nconst MOVIE_DETAILS_URL = `${BASE_URL}/movie/`;\n\nasync function getTrendFetch() {\n  const params = {\n    api_key: API_KEY,\n  };\n  const response = await axios.get(`${TREND_URL}`, { params });\n  console.log('111111', response);\n  return response.data;\n}\n\nasync function getMovieDeteilFetch(movieId) {\n  const params = {\n    api_key: API_KEY,\n  };\n  const response = await axios.get(`${MOVIE_DETAILS_URL}${movieId}`, {\n    params});\n\n  return response.data;\n}\n\n\n\nasync function getMovieCast(movieId){\n  const params = {\n    api_key: API_KEY,\n  };\n const response= await axios.get(`${MOVIE_DETAILS_URL}${movieId}/credits`, {\n  params});\n\nreturn response.data\n}\n\n\nasync function getMoviesReviews (movieId){\n  const params = {\n    api_key: API_KEY,\n  };\nconst response= await axios.get(`${MOVIE_DETAILS_URL}${movieId}/reviews`, {params})\nreturn response.data\n\n}\n\nasync function  getSearchFetch (moviesName){\n  const params = {\n    api_key: API_KEY,\n    query: moviesName,\n    page:1,\n  };\n\nconst response = await axios.get(`${SEARCH_URL}`,{params})\nreturn response.data\n\n}\n\n\n\n\n\n\nexport { getTrendFetch, getMovieDeteilFetch, getMovieCast, getMoviesReviews, getSearchFetch};\n"],"names":["Conteiner","styled","List","Li","ImgBox","trendMovies","location","useLocation","map","id","title","release_date","poster_path","to","state","from","src","posterPlug","alt","width","slice","useState","setTrendMovies","useEffect","getTrendFetch","trendMov","console","log","results","getTrendMovies","BASE_URL","API_KEY","TREND_URL","SEARCH_URL","MOVIE_DETAILS_URL","params","api_key","axios","response","data","getMovieDeteilFetch","movieId","getMovieCast","getMoviesReviews","getSearchFetch","moviesName","query","page"],"sourceRoot":""}