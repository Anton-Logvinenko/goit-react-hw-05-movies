{"version":3,"file":"static/js/94.9f643f5b.chunk.js","mappings":"qQAiBA,EAjBoB,SAAC,GAAqB,IAAnBA,EAAkB,EAAlBA,YAGrB,OAA6B,IAAtBA,EAAYC,QACjB,sEAEA,wBACGD,EAAYE,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAASC,EAApB,EAAoBA,GAApB,OACf,2BACE,qCAAaF,MACb,6BAAKC,OAFEC,EADM,KAQtB,ECeD,EAxBgB,WACd,OAAsCC,EAAAA,EAAAA,UAAS,MAA/C,eAAON,EAAP,KAAoBO,EAApB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAeR,IAbAE,EAAAA,EAAAA,YAAU,WAAM,wCACd,8GAE8BC,EAAAA,EAAAA,IAAiBH,GAF/C,OAEUI,EAFV,OAIIL,EAAeK,EAAYC,SAJ/B,gDAMIC,QAAQC,IAAR,MANJ,0DADc,uBAAC,WAAD,wBAUdC,EACD,GAAE,CAACR,IAECR,EAGL,OAAO,SAAC,EAAD,CAAaA,YAAaA,GAClC,C,mMCzBKiB,EAAW,+BACXC,EAAU,mCACVC,EAAS,UAAMF,EAAN,wBACTG,EAAU,UAAMH,EAAN,iBACVI,EAAiB,UAAMJ,EAAN,WAAvB,SAEeK,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,6FACQC,EAAS,CACbC,QAASN,GAFb,SAIyBO,EAAAA,EAAAA,IAAA,UAAaN,GAAa,CAAEI,OAAAA,IAJrD,cAIQG,EAJR,yBAKSA,EAASC,MALlB,2EAQeC,EAAoB,GAApBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAmCpB,GAAnC,gFACQe,EAAS,CACbC,QAASN,GAFb,SAIyBO,EAAAA,EAAAA,IAAA,UAAaJ,GAAb,OAAiCb,GAAW,CACjEe,OAAAA,IALJ,cAIQG,EAJR,yBAQSA,EAASC,MARlB,2EAWeE,EAAa,GAAbA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA4BrB,GAA5B,gFACQe,EAAS,CACbC,QAASN,GAFb,SAIyBO,EAAAA,EAAAA,IAAA,UAAaJ,GAAb,OAAiCb,EAAjC,YAAoD,CACzEe,OAAAA,IALJ,cAIQG,EAJR,yBAQSA,EAASC,MARlB,2EAWehB,EAAiB,GAAjBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAgCH,GAAhC,gFACQe,EAAS,CACbC,QAASN,GAFb,SAIyBO,EAAAA,EAAAA,IAAA,UAAaJ,GAAb,OAAiCb,EAAjC,YAAoD,CACzEe,OAAAA,IALJ,cAIQG,EAJR,yBAOSA,EAASC,MAPlB,2EAUeG,EAAe,GAAfA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA8BC,GAA9B,gFACQR,EAAS,CACbC,QAASN,EACTc,MAAOD,GAHX,SAMyBN,EAAAA,EAAAA,IAAA,UAAaL,GAAc,CAAEG,OAAAA,IANtD,cAMQG,EANR,yBAOSA,EAASC,MAPlB,kE","sources":["components/ReviewsList/ReviewsList.jsx","components/ReviewsList/Reviews.jsx","services/MoviesFetch.jsx"],"sourcesContent":["const ReviewsList = ({ reviewsInfo }) => {\n\n\n  return reviewsInfo.length ===0 ? (\n    <h2>We don,t have any reviews for this movie</h2>\n  ) : (\n    <ul>\n      {reviewsInfo.map(({ author, content, id }) => (\n        <li key={id}>\n          <p> Author: {author}</p>\n          <p> {content}</p>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default ReviewsList;\n","\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMoviesReviews } from '../../services/MoviesFetch';\nimport ReviewsList from './ReviewsList';\n\nconst Reviews = () => {\n  const [reviewsInfo, setReviewsInfo] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function getReviewsInfo() {\n      try {\n        const reviewsData = await getMoviesReviews(movieId);\n\n        setReviewsInfo(reviewsData.results);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    getReviewsInfo();\n  }, [movieId]);\n\n  if (!reviewsInfo) {\n    return;\n  }\n  return <ReviewsList reviewsInfo={reviewsInfo} />;\n};\n\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '992e567e43c913ea6cedbae9c8870c1e';\nconst TREND_URL = `${BASE_URL}/trending/movie/week`;\nconst SEARCH_URL = `${BASE_URL}/search/movie`;\nconst MOVIE_DETAILS_URL = `${BASE_URL}/movie/`;\n\nasync function getTrendFetch() {\n  const params = {\n    api_key: API_KEY,\n  };\n  const response = await axios.get(`${TREND_URL}`, { params });\n  return response.data;\n}\n\nasync function getMovieDeteilFetch(movieId) {\n  const params = {\n    api_key: API_KEY,\n  };\n  const response = await axios.get(`${MOVIE_DETAILS_URL}${movieId}`, {\n    params,\n  });\n\n  return response.data;\n}\n\nasync function getMovieCast(movieId) {\n  const params = {\n    api_key: API_KEY,\n  };\n  const response = await axios.get(`${MOVIE_DETAILS_URL}${movieId}/credits`, {\n    params,\n  });\n\n  return response.data;\n}\n\nasync function getMoviesReviews(movieId) {\n  const params = {\n    api_key: API_KEY,\n  };\n  const response = await axios.get(`${MOVIE_DETAILS_URL}${movieId}/reviews`, {\n    params,\n  });\n  return response.data;\n}\n\nasync function getSearchFetch(moviesName) {\n  const params = {\n    api_key: API_KEY,\n    query: moviesName,\n  };\n\n  const response = await axios.get(`${SEARCH_URL}`, { params });\n  return response.data;\n}\n\nexport {\n  getTrendFetch,\n  getMovieDeteilFetch,\n  getMovieCast,\n  getMoviesReviews,\n  getSearchFetch,\n};\n"],"names":["reviewsInfo","length","map","author","content","id","useState","setReviewsInfo","movieId","useParams","useEffect","getMoviesReviews","reviewsData","results","console","log","getReviewsInfo","BASE_URL","API_KEY","TREND_URL","SEARCH_URL","MOVIE_DETAILS_URL","getTrendFetch","params","api_key","axios","response","data","getMovieDeteilFetch","getMovieCast","getSearchFetch","moviesName","query"],"sourceRoot":""}